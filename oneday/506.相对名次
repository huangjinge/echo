**链接：** https://leetcode-cn.com/problems/relative-ranks/ 
**难度：** <font color="green">简单</font>

### 题目描述
	给你一个长度为 n 的整数数组 score ，其中 score[i] 是第 i 位运动员在比赛中的得分。所有得分都 互不相同 。	
	运动员将根据得分 决定名次 ，其中名次第 1 的运动员得分最高，名次第 2 的运动员得分第 2 高，依此类推。运动员的名次决定了他们的获奖情况：
	名次第 1 的运动员获金牌 "Gold Medal" 。
	名次第 2 的运动员获银牌 "Silver Medal" 。
	名次第 3 的运动员获铜牌 "Bronze Medal" 。
	从名次第 4 到第 n 的运动员，只能获得他们的名次编号（即，名次第 x 的运动员获得编号 "x"）。
	使用长度为 n 的数组 answer 返回获奖，其中 answer[i] 是第 i 位运动员的获奖情况。

#### 示例：
> **输入：** score = [10,3,8,9,4]  
> **输出：** ["Gold Medal","5","Bronze Medal","Silver Medal","4"]  
> **解释：** 名次为 [1st, 5th, 3rd, 2nd, 4th] 。

##### 提示：
- <code>n == score.length</code>
- <code>1 <= n <= 104</code>
- <code>0 <= score[i] <= 106</code>
- <code>score 中的所有值 互不相同</code>

### 解题思路
#### 排序 
    将切片进行排序（降序排列），然后按照顺序标记

```golang
func findRelativeRanks(score []int) []string {
	mMap := map[int]string{
		1 : "Gold Medal",
		2 : "Silver Medal",
		3 : "Bronze Medal",
	}
	//保存原始的切片
	//注：赋值语句得到的切片arr(arr=score)，和score指向同一底层数组，所以score排序，底层数组会变化，导致arr也会随之变化，故要以遍历挨个赋值的方式保存原始切片
	arr := make([]int, 0)
	for _, v := range score {
		arr = append(arr, v)
	}

	//降序排列
	sort.Slice(arr, func(i, j int) bool {
		return arr[i] > arr[j]
	})

	//标记
	aMap := make(map[int]string, 0)
	for i := 0; i < len(arr); i++ {
		if i <= 2 {
			aMap[arr[i]] = mMap[i+1]
		}else {
			aMap[arr[i]] = fmt.Sprintf("%d", i + 1)
		}
	}
	s := make([]string, 0)
	for _, v := range score {
		s = append(s, aMap[v])
	}
	return s
}

```
##### 复杂度
- 时间复杂度：$ O(N)$，其中n是字符串s的长度。遍历一次s的时间复杂度为 O(n)。
- 空间复杂度：$ O(1) $，我们只需要常数的空间保存若干变量。